{"version":3,"sources":["components/ContactCards.js","App.js","index.js"],"names":["ContactCards","contactList","map","contact","index","className","alt","src","picture","large","name","first","last","email","location","street","number","city","state","phone","App","useFetch","url","data","isLoading","error","useState","setContactList","filterQuery","setFilterQuery","useEffect","queryString","toLowerCase","filteredData","results","filter","fullName","length","charAt","includes","type","placeholder","onChange","event","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAqCeA,EAnCM,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAEpB,OAAKA,EAKD,0CACKA,QADL,IACKA,OADL,EACKA,EAAaC,KAAI,SAACC,EAASC,GAAV,OACd,yBAAoBC,UAAU,qDAA9B,UACI,qBACIC,IAAI,OACJD,UAAU,iCACVE,IAAKJ,EAAQK,QAAQC,QACzB,6BAAYJ,UAAU,mBAAtB,UACI,oBAAGA,UAAU,2CAAb,UACKF,EAAQO,KAAKC,MADlB,IAC0BR,EAAQO,KAAKE,QAEvC,oBAAGP,UAAU,gBAAb,UACI,sBAAMA,UAAU,cAAhB,oBADJ,IACiDF,EAAQU,SAEzD,oBAAGR,UAAU,gBAAb,UACA,sBAAMA,UAAU,cAAhB,sBADA,IAC+CF,EAAQW,SAASC,OAAOC,OADvE,IACgFb,EAAQW,SAASC,OAAOL,QAExG,oBAAGL,UAAU,gBAAb,UAA8BF,EAAQW,SAASG,KAA/C,KAAuDd,EAAQW,SAASI,MAAxE,OACA,oBAAGb,UAAU,gBAAb,UACJ,sBAAMA,UAAU,cAAhB,oBADI,IACyCF,EAAQgB,cAjB5Cf,QANd,qDCqDAgB,EAtDH,WACV,IACA,EAAmCC,IAASC,gDAAzBC,GAAnB,EAAQC,UAAR,EAAmBD,MAEnB,GAFA,EAAyBE,MAEaC,mBAAS,KAA/C,mBAAOzB,EAAP,KAAoB0B,EAApB,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KA6BA,OA3BAC,qBAAU,WACR,GAAIF,EAAa,CAAC,IAAD,EAETG,EAAcH,EAAYI,cAE1BC,EAAY,OAAGV,QAAH,IAAGA,GAAH,UAAGA,EAAMW,eAAT,aAAG,EAAeC,QAAO,SAAChC,GAC1C,IAAMiC,EAAQ,UAAMjC,EAAQO,KAAKC,MAAnB,YAA4BR,EAAQO,KAAKE,MAEvD,OAA2B,IAAvBmB,EAAYM,OAEMD,EAASE,OAAO,GAAGN,gBAChBD,EAGhBK,EAASJ,cAAcO,SAASR,MAI3CJ,EAAeM,QAKfN,EAAc,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAMW,WAEtB,CAACX,EAAMK,IAGR,sBAAKvB,UAAW,sCAAhB,UACE,kCACE,+BACE,uBACEmC,KAAM,OACNnC,UAAW,4BACXoC,YAAa,yBACbC,SAAU,SAACC,GAAD,OAAWd,EAAec,EAAMC,OAAOC,cAKvD,yBAASxC,UAAW,gDAApB,SACE,cAAC,EAAD,CAAcJ,YAAaA,U,MC/CnC6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dca69fd7.chunk.js","sourcesContent":["import React from 'react';\n\nconst ContactCards = ({ contactList }) => {\n    // contactList && console.log(contactList)\n    if (!contactList) {\n        return <h2> no users reported</h2>\n    } else {\n    \n    return (\n        <>\n            {contactList?.map((contact, index) => (\n                <figure key={index} className='bg-white h-100 rounded-lg shadow-md pt-7 pb-3 px-3'>\n                    <img\n                        alt='user'\n                        className='w-32 h-32 rounded-full mx-auto'\n                        src={contact.picture.large} />\n                    <figcaption className='text-center mt-5'>\n                        <p className='text-grey-600 font-semibold text-xl mb-2'>\n                            {contact.name.first} {contact.name.last}\n                        </p>\n                        <p className='text-gray-500'>\n                            <span className='font-medium'>email:</span> {contact.email}\n                        </p>\n                        <p className='text-gray-500'>\n                        <span className='font-medium'>address:</span> {contact.location.street.number} {contact.location.street.name}\n                        </p>\n                        <p className='text-gray-500'>{contact.location.city}, {contact.location.state} </p>\n                        <p className='text-gray-500'>\n                    <span className='font-medium'>phone:</span> {contact.phone}</p>\n                    </figcaption>\n                </figure>\n\n            ))}\n        </>\n    )}\n}\n\nexport default ContactCards","import React, { useEffect, useState } from 'react';\nimport useFetch from 'react-fetch-hook'\nimport ContactCards from './components/ContactCards'\n\nconst App = () => {\n  const url = 'https://randomuser.me/api/'\n  const { isLoading, data, error } = useFetch(url+'?nat=us&results=20')\n\n  const [contactList, setContactList] = useState('')\n  const [filterQuery, setFilterQuery] = useState('')\n\n  useEffect(() => {\n    if (filterQuery) {\n      // use filterQuery function\n      const queryString = filterQuery.toLowerCase()\n\n      const filteredData = data?.results?.filter((contact) => {\n        const fullName = `${contact.name.first} ${contact.name.last}`\n        \n        if (queryString.length === 1) {\n          //only finds the names that start with the input letter\n          const firstLetter = fullName.charAt(0).toLowerCase()\n          return firstLetter === queryString\n        } else {\n          //finds any name that includes the combination of letters typed into the input form\n          return fullName.toLowerCase().includes(queryString)\n        }\n\n      })\n      setContactList(filteredData)\n\n\n    } else {\n      // display all the data\n      setContactList(data?.results)\n    }\n  }, [data, filterQuery])\n\n  return (\n    <div className={'bg-gray-600 font-sans tracking-wide'}>\n      <section>\n        <form>\n          <input\n            type={'text'}\n            className={'ml-20 mt-6 rounded-md p-3'}\n            placeholder={'type here to filter...'}\n            onChange={(event) => setFilterQuery(event.target.value)}\n          />\n        </form>\n      </section>\n\n      <section className={'grid sm:grid-cols-2 lg:grid-cols-4 gap-6 p-20'}>\n        <ContactCards contactList={contactList} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}